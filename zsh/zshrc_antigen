# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"

# ------------------BEGIN-----------------------
# os-specific
if [[ -e /etc/os-release ]];
then
    os=$(cat /etc/os-release | grep '^ID=' | cut -c4- | tr '[:upper:]' '[:lower:]')
    if [ -n "$os" ];then
        case "$os" in
            "arch")
                alias syslog='sudo journalctl -r'
                alias logmonitor='sudo journalctl -f'
                ;;
            "manjaro")
                alias syslog='sudo journalctl -r'
                alias logmonitor='sudo journalctl -f'
                ;;
            "ubuntu"|"elementary")
                alias syslog='sudo less /var/log/syslog'
                alias logmonitor='sudo tail -f /var/log/syslog'
                ;;
            *)
                ;;
        esac
    fi
fi

# ==================END=========================

# setopt extended_glob
# export PATH="$HOME/local:/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.yarn/bin:$HOME/.elan/bin:$HOME/.cargo/bin:$HOME/kit/ocr:$HOME/kit/ocr/tools:$HOME/kit:$PATH"
# export EDITOR="nvim"

# function cdd(){
#     cd $@ && ls
# }

# function showme()
# {
#     if which nvim > /dev/null 2>&1;
#     then
#         nvim "$(which $1)"
#     else
#         vim "$(which $1)"
#     fi
# }

# function findit()
# {
#     case $# in
#         0 )
#             echo "arguments required"
#             return 0
#             ;;
#         1 )
#             find "$PWD" -iname "*$1*"
#             ;;
#         2 )
#             find "$(realpath $2)" -iname "*$1*"
#             ;;
#         * )
#             echo ":find PARTEN [path]"
#             return 0
#     esac
# }

# function swap()
# {
#     local TMPFILE=tmp.$$
#     mv "$1" $TMPFILE
#     mv "$2" "$1"
#     mv $TMPFILE "$2"
# }

# function pps(){
#     ids=$(pgrep -f "$1")
#     if [[ -z $ids ]];
#     then
#         echo "there is no such process"
#     else
#         ps -pf "$ids"  
#     fi
# }
# function ppkill(){
#     ps -fp $(pgrep -f "$1")
#     pkill -f  "$1"
# }

# function setproxy() {
#     export {http,https,ftp,all}_proxy="${1-http}://127.0.0.1:${2-7890}"
# }

# function proxy_clash(){
#     export https_proxy=http://127.0.0.1:7890;
#     export http_proxy=http://127.0.0.1:7890;
#     # export all_proxy=socks5://127.0.0.1:7891
#     export ALL_PROXY=socks5://127.0.0.1:7891
# }

# function unsetproxy() {
#     unset {http,https,ftp,all}_proxy
# }

# function help() {
#     bash -c "help $1"
# }

# function color(){
#     for i in {0..255} ; do
#         printf "\x1b[38;5;${i}m%3d " "${i}"
#         if (( $i == 15 )) || (( $i > 15 )) && (( ($i-15) % 12 == 0 )); then
#             echo;
#         fi
#     done
# }

export R_ENVIRON_USER='~/.config/r/.Renviron'

export AURDEST='/var/cache/pacaur/pkg'

#ssh log in to server hosted on vultr
export set github="https://github.com/"

#save $PS1 for restore
export PS_="$PS1"

# Aliases
alias grep='grep --color=always'
alias ssh='TERM=xterm-256color ssh'
# alias ssl="nohup  sslocal -s  149.28.123.239  -p 9293 -k vultr@_2018 > /dev/null 2>&1 &"
alias locat="locate -Abi"
alias pcs=proxychains4
alias ghcd='ghc -dynamic'
alias ucap='setxkbmap -option caps:ctrl_modifier'
alias recap='setxkbmap -option'
alias fixkey='xmodmap -e "keycode 112 = semicolon colon"'
alias wget_all='wget -r -np -k' #download all files in a page
alias lld='ls -d */'
alias git-root='cd $(git rev-parse --show-toplevel)'
alias pacsort='pacsize| sort -rhk 2| less'
alias weixin='nohup vivaldi-stable -app=https://wx.qq.com >/dev/null 2>&1  &'
alias navicate='nohup ~/local/navicat15-premium-cs-patched.AppImage >/dev/null 2>&1  &'
alias webui='nohup vivaldi-stable -app=file:///home/carl/local/webui-aria2/index.html >/dev/null 2>&1  &'

alias whatsmyip="wget -qO- http://ipecho.net/plain ; echo"
alias localip="ip a | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"

alias radioabcnews="mplayer -playlist http://www.abc.net.au/res/streaming/audio/mp3/news_radio.pls" #
alias radiobbcnews="mplayer -playlist http://minnesota.publicradio.org/tools/play/streams/news.pls" #
alias radiorn="mplayer -playlist http://www.abc.net.au/res/streaming/audio/mp3/radio_national.pls" #
alias radiojjj="mplayer -playlist  http://www.abc.net.au/res/streaming/audio/mp3/triplej.pls" #
alias radiobbcnews="mplayer -playlist http://minnesota.publicradio.org/tools/play/streams/news.pls" #
alias radiosleepbot="mplayer -playlist http://sleepbot.com/ambience/cgi/listen.cgi/listen.pls" # Sleepbot Environmental Broadcast 56K MP3

alias ximalaya='nohup vivaldi-stable -app=https://www.ximalaya.com >/dev/null 2>&1  &'
alias a2c='nohup aria2c --conf-path=/etc/aria2/aria2.conf > ~/aria2c.log 2>&1 & ' 
alias yacc='nohup vivaldi-stable -app=http://127.0.0.1:3000 >/dev/null 2>&1 &'
alias netdataa='nohup vivaldi-stable -app=http://127.0.0.1:19999 >/dev/null 2>&1 &'
alias wifion='nmcli radio wifi on'
alias suspendw='nmcli radio wifi off && systemctl suspend'
alias yadd='cd /home/carl/local/yacd && nohup  yarn start >/dev/null 2>&1 &'
alias jupyter_ter='nohup vivaldi-stable -app=http://43.255.116.34:8888/terminals/1 2>&1 &'
alias jupyter_rem='nohup vivaldi-stable -app=http://43.255.116.34:8888 2>&1 &'
alias odrive='nohup vivaldi-stable -app=https://oxsayacid-my.sharepoint.com/personal/book72_ixsay_com >/dev/null 2>&1 &'
alias tianyi="nohup vivaldi-stable -app=https://cloud.189.cn/main.action >/dev/null 2>&1"
alias baiduyun="nohup vivaldi-stable -app=https://pan.baidu.com >/dev/null 2>&1"
alias bdpcs="baidupcs-go"
alias rsynccl='rsync -rv --delete /home/carl/mounts/galileo/main/  /home/carl/mounts/RACOON/Calibre_Library'
# alias cl2gd="rclone sync ~/mounts/galileo/Calibre_Library gd_alves:library -v --no-update-modtime"
alias mypublicip='drill +short myip.opendns.com @resolver1.opendns.com | grep IN | tac | cut -f5 -s'
alias git-root='cd $(git rev-parse --show-toplevel)'
alias du1='du -hd0'
alias ,e='nvim ~/.zshrc'
alias prm=". ~/kit/prm.sh"
# alias ssh='autossh'
alias exp='less ~/kit/experience.sh'
alias exp-add='nvim ~/kit/experience.sh'
alias fixmode='find . -perm 000 -exec chmod 755 {} \;'

# eval "$(fasd --init auto)"
# alias a='fasd -a'        # any
# alias s='fasd -si'       # show / search / select
# alias d='fasd -d'        # directory
# alias f='fasd -f'        # file
# alias sd='fasd -sid'     # interactive directory selection
# alias sf='fasd -sif'     # interactive file selection
# alias z='fasd_cd -d'     # cd, same functionality as j in autojump
# alias zz='fasd_cd -d -i' # cd with interactive selection

##use beam style on start up
#printf '\033[5 q';
#alias ng="sudo npm list -g --depth=0 2>/dev/null"
#alias nl="npm list --depth=0 2>/dev/null"

# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ------------------BEGIN------------------------------
#  ==> zle bindkey
#  alt+s to prepend 'sudo' to current command and move to EOL.
bindkey -s '^s^s' 'tmux set-option status'
bindkey -e
bindkey -s '\es' 'sudo '
# -----------------END--------------------


# to viins with alt-e and from viminsert to emacs mode with alt-e too
function _toggle-keymap {
if ! bindkey | grep 'vi-join' > /dev/null 3>&1; then
    bindkey -e
    RPROMPT='[emacs]'
    zle reset-prompt
    printf '\033[5 q';
else
    bindkey -v
    printf '\033[3 q';
    bindkey "jk" vi-cmd-mode
    bindkey "\ee" _toggle-keymap
    zle -U ''
    RPROMPT='[vim]'
    zle reset-prompt
fi
}
# switch to emacs mode when in vicmd mode
function _toggle-keymap2 {
bindkey -e
RPROMPT='[emacs]'
zle reset-prompt
printf '\033[5 q';
}
zle -N emacs _toggle-keymap2
bindkey -M vicmd '^[e' emacs

cursor_block="\e[2 q"
cursor_line="\e[6 q"

if [[ ! -z "$cursor_block" && ! -z "$cursor_line" ]]; then
    # Change cursor shape when vi mode changes
    function zle-keymap-select zle-line-init {
    case $KEYMAP in
        vicmd)      print -n -- "$cursor_block" ;;
        viins|main) print -n -- "$cursor_line" ;;
    esac
    zle reset-prompt
    zle -R
}

  # Change cursor shape when line editing is finished
  function zle-line-finish { print -n -- "$cursor_block" }

  # Register cursor shape hooks
  zle -N zle-keymap-select
  zle -N zle-line-init
  zle -N zle-line-finish
fi

zle -N _toggle-keymap
bindkey "\ee" _toggle-keymap

# Enable accepting autosuggestions
bindkey '^O' forward-word
# bindkey '^P' autosuggest-accept

# Enable substring history search with 'j' and 'k'
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Replace '<Esc>h' with 'K' to view help
bindkey -r '^[h'
bindkey -M vicmd 'K' run-help

# Enable '<Shirt><Tab>' reverse order completions
bindkey '^[[Z' reverse-menu-complete

# Use editor to edit command line with '<Ctrl>V'
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd '^V' edit-command-line
# ==================END================================

# # ------------------BEGIN------------------------------
# #  ==>autosuggestions
# ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=30
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=32'
# # ==================END================================

# # ------------------BEGIN------------------------------
# #  ==> ENV VAR
# ENABLE_CORRECTION="true"
# COMPLETION_WAITING_DOTS="true"


# # Save all history
# # # Incrementally write history to file
# setopt INC_APPEND_HISTORY
# # # Save timestamp to history file too
# setopt EXTENDED_HISTORY
# # # Import newly written commands from the history file
# setopt SHARE_HISTORY

# ==================END================================


# # ------------------BEGIN------------------------------
# #  ==> autoenv or direnv
# if which direnv > /dev/null 2>&1;
# then
#     eval "$(direnv hook zsh)"
# fi

# if which activate.sh > /dev/null 2>&1;
# then
#     source `which activate.sh`
# fi
# # ==================END================================


# ------------------BEGIN------------------------------
#  ==>Host

case "$(hostname)" in
    "Snow-Crash")
        alias admin='cd /mnt/c/Users/Admin/'
        alias project='cd /mnt/d/Projects'
        export PS1="%{$fg[blue]%}%/%{$reset_color%} $(bzr_prompt_info)%{$fg[white]%}[%n@%m]%{$reset_color%} %{$fg[white]%}[%T]%{$reset_color%}%{$fg_bold[black]%}$(new_line)%{$reset_color%}"
        alias clash='nohup /usr/bin/clash -d ~/local/clash 2>&1 > ~/clash.log &'
        alias yacd='cd ~/local/clash-dashboard && nohup npm start > ~/nohup.out &'
        if [ ! $TMUX ];
        then
            tmux new-session -s Home -n main -d
            # tmux send-key -t Home:1.1 "ucap && fixkey && update_clash" 'Enter'
            tmux attach-session -t Home
            # update_clash
        fi
        setproxy http 7890
        ;;
    "xiaoxin")
        alias ios='ifus -o allow_other ~/ios && ifuse --list-apps'
        alias rand='sed "$(shuf -i 1-2559 -n 1)p;d" seagate'
        function blight(){
            sudo xbacklight  -set $1
        }
        function sblight(){
            float i=$(cat /sys/class/backlight/amdgpu_bl0/brightness)
            float j=255
            integer k=$((i / j * 100))
            echo $k%
        }
        if [ ! $TMUX ];
        then
            tmux new-session -s Home -n main -d
            # tmux send-key -t Home:1.1 "ucap && fixkey && update_clash" 'Enter'
            tmux attach-session -t Home
            # update_clash
        fi
        function setwine(){
            if [[ $1 == "" ]]; then
                export WINEARCH=win64 
                export WINEPREFIX=/home/carl/.wine
            else
                export WINEARCH=win32 
                export WINEPREFIX=/home/carl/.local/share/wineprefixes/"$1"
            fi
        }
        function unsetwine(){
            export WINEARCH=win64 
            export WINEPREFIX=/home/carl/.wine
        }
        ;;
    "dream")
        alias anaconda='export PATH="/opt/anaconda/bin:$PATH"'
        ZSH_THEME="rkj-repos"
        alias readbook='cd /mnt/galileo/BOOK && nohup evince "$(fzf)"'
        alias clash='sudo nohup /home/carl/local/clash-linux-amd64-v0.16.0  2>&1 > ~/clash.log &'
        alias yacd='cd /home/carl/local/clash-dashboard && nohup npm start > ~/nohup.out &'
        if [ ! $TMUX ];
        then
            tmux new-session -s Home -n main -d
            # tmux send-key -t Home:1.1 "ucap && fixkey && update_clash" 'Enter'
            tmux attach-session -t Home
            # update_clash
        fi
        ;;
    "elementary")
        ZSH_THEME="frisk"
        alias anaconda='export "PATH=/home/carl/anaconda3/bin:$PATH"'
        function ml(){
            if [ -n "$1" ] && [ "$1" = "exit" ];then
                cd ~
                export PS1="$PS_"
            else
                if [ -z "$(ls -A ~/wdh)" ]; then
                    echo "Trying"
                    if [ ! $(sudo mount /home/carl/wdh) ]; then
                        echo "OK"
                    else
                        echo "......"
                    fi
                else
                    cd ~/wdh/ml/
                    export PS1="%{$fg[yellow]%}(WDH_ml) $PS1"
                fi
            fi
        }
        alias cdy='cd /mnt/share/racoon && pwd=${PWD} && sudo caddy -conf /usr/local/caddy/Caddyfile &; cd "$pwd" '
        alias cby='calibre-server /mnt/share/racoon/Calibre_Library --userdb /home/carl/.config/calibre/user.sqlite --enable-auth &'
        alias jpy='mount ~/wdh ; anaconda && jupyter notebook &'
        ;;
    "WDH")
        unsetopt BG_NICE
        alias docker='docker.exe'
        alias gvim='gvim.exe'
        alias nvim-qt='nvim-qt.exe'
        alias anaconda='export "PATH=/mnt/e/.anaconda3/bin:$PATH"'
        alias host='sudo ~/kit/update_hosts.sh'
        export set  home='/mnt/c/Users/Administrator'
        alias CD="cd $home"
        ZSH_THEME="ys"
        # ZSH_THEME="spaceship"
        function ssho(){
            ssh $(nmblookup ${1} | awk '{print $1}')
        }
        ;;
    'PlatoMac')
        echo "PlatoMac"
        HOMEBREW_NO_AUTO_UPDATE=1
        # alias Jupyter="ssh  -f administrator@WDH 'activate ml & cd ml & jupyter notebook --no-browser'"
        # alias Ipython="ssh  administrator@WDH 'activate ml & cd ml & ipython'"
        # alias lizzie="java -jar ~/leela/Lizzie/lizzie.jar > /dev/null &"
        # # android emulator
        # function Emulator(){
        #     cd /Volumes/Fourth/Android/sdk/tools
        #     /Volumes/Fourth/Android/sdk/tools/emulator $@
        # }

        function pipi(){
            python3 -m pip install $@
        }
        test -e "${HOME}/.lterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

        # export NVM_DIR="$HOME/.nvm"
        # [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
        # [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

        #alias for cnpm
        alias cnpm="npm --registry=https://registry.npmmirror.com \
            --cache=$HOME/.npm/.cache/cnpm \
            --disturl=https://npmmirror.com/mirrors/node \
            --userconfig=$HOME/.cnpmrc"

        if [ ! $TMUX ];
        then
            tmux new-session -s Home -n main -d
            # tmux send-key -t Home:1.1 "ucap && fixkey && update_clash" 'Enter'
            tmux attach-session -t Home
            # update_clash
        fi
        ;;
    *)
        ;;
esac

# ------------------BEGIN------------------------------
#  ==>percol utilized alias
alias perps='ps aux | percol | awk "{ print $2 }"'
alias perpkill='ps aux | percol | awk "{ print $2 }" | xargs kill'

function ppgrep() {
    if [[ $1 == "" ]]; then
        PERCOL=percol
    else
        PERCOL="percol --query $1"
    fi
    ps aux | eval $PERCOL | awk '{ print $2 }'
}

function ppkill() {
    if [[ $1 =~ "^-" ]]; then
        QUERY=""            # options only
    else
        QUERY=$1            # with a query
        [[ $# > 0 ]] && shift
    fi
    ppgrep $QUERY | xargs kill $*
}

function exists { which $1 &> /dev/null }

# if exists percol; then
#     function percol_select_history() {
#         local tac
#         exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
#         BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
#         CURSOR=$#BUFFER         # move cursor
#         zle -R -c               # refresh
#     }

#     zle -N percol_select_history
#     bindkey '^R' percol_select_history
# fi

function pattach() {
    if [[ $1 == "" ]]; then
        PERCOL=percol
    else
        PERCOL="percol --query $1"
    fi

    sessions=$(tmux ls)
    [ $? -ne 0 ] && return

    session=$(echo $sessions | eval $PERCOL | cut -d : -f 1)
    if [[ -n "$session" ]]; then
        tmux att -t $session
    fi
}

## ------------------BEGIN------------------------------
##  ==>fzf
## tmux split
#export FZF_TMUX=1

## Using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
#export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

##full screen mode
## export FZF_DEFAULT_OPTS='--no-height --no-reverse'

##Commands that are too long are not fully visible on screen. We can use --preview option to display the full command on the preview window. In the following example, we bind ? key for toggling the preview window.
#export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

#fzf-history-widget-accept() {
#fzf-history-widget
#zle accept-line
#}
#zle     -N     fzf-history-widget-accept
#bindkey '^X^R' fzf-history-widget-accept

## ==================END================================



# ------------------BEGIN------------------------------
#  ==> fzf
#determines search program for fzf
if type ag &> /dev/null; then
    export FZF_DEFAULT_COMMAND='ag -p ~/.gitignore -g ""'
fi
#refer rg over ag
if type rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND='rg --files --hidden'
fi



alias pdf_fzf='evince "$(fzf)"'
alias dj_fzf='djview4 "$(fzf)"'
alias efzf='ebook-viewer "$(fzf)"'

# pdfzf(){
#     if [[ $(uname) =~ "Darwin" ]]; then
#         name=$(fzf -m "$@")
#         /usr/bin/open "$name"
#     else
#         name=$(fzf -m "$@")
#         if [[ -n "$name" && $name =~ .*\.pdf ]]; then
#             nohup okular "$name" &
#         elif [[ -n "$name" && $name =~ .*\.djvu ]]; then
#             nohup djview4 "$name" &
#         elif [[ -n "$name" && ($name =~ .*\.epub || $name =~ .*\.mobi) ]]; then
#             nohup ebook-viewer "$name" &
#         fi
#     fi
# }

ctrlp() {
    dir="$(find -type d | grep -v .git | grep -v node_modules | fzf)";
    [[ -d "$dir" ]] && cd $dir;
    zle reset-prompt  
}

zle -N ctrlp
bindkey ",cd" ctrlp


ctrlp2() {
    dir="$(fzf)";
    LBUFFER="${LBUFFER} $dir "
    zle reset-prompt  
}
zle -N ctrlp2
bindkey ",j" ctrlp2

alias pac="pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S"
# ==================END================================



# ------------------BEGIN------------------------------
#  ==>  current editor buffer tricks
copy2x(){
    echo "$BUFFER" | xclip -selection clipboard
}
zle -N copy2x
bindkey ",p" copy2x


output2x() {
    LBUFFER="${LBUFFER} | tee /dev/tty | xclip -selection clipboard"
    zle reset-prompt  
}
zle -N output2x
bindkey ",pp" output2x

# pc4() {
#     LBUFFER="proxychains4 ${LBUFFER}"
#     zle reset-prompt  
# }

# zle -N pc4
# bindkey ",px" pc4

# eval-memoi caches the command in redis
rclonef () {
    local paths=("${(@f)$(memoi_expire=${rfExpire:-$((3600*24))} eval-memoi rclone lsf --recursive "${1}:" | fzf)}")
    local i
    for i in $paths[@]
    do
        rclone copy "${1}:$i" "$2"
    done
}

export RIPGREP_CONFIG_PATH='~/.ripgreprc'

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"

