#!/bin/sh

CURRENT_DIR="$(cd "$(dirname "${0}")" && pwd)"

. "${CURRENT_DIR}/scripts/vars.sh"
. "${CURRENT_DIR}/scripts/helpers.sh"

#source tmux variables so tundle can be located at any place in ~/.tmux.conf
_reload_tmux_environment(){
    awk "/^[ \t]*set/" ~/.tmux.conf > /tmp/tundle-init-environment && \
    tmux source-file /tmp/tundle-init-environment >/dev/null 2>&1
}

# 1. Fetches plugin names from `@bundle|@plugin|@tpm_plugins` user variable.
# 2. Creates full plugin path
# 3. Sources all *.tmux files from each of the plugin directories
#    - no errors raised if directory does not exist
# Files are sourced as tmux config files, not as shell scripts!
_source_plugins() {
    _set_default_vars_helper || return 1
    for _splugins__plugin in $(_get_plugins_list_helper); do
        _splugins__plugin_name="$(_get_plugin_name_helper "${_splugins__plugin}")"

        #allow git subdirectories, eg: github:username/repository/plugin-subdirectory
        #drawback, plugins cannot have a directory with the same plugin name within, eg:
        #github:username/plugin-name/plugin-name/stuff
        [ -d "${TMUX_PLUGIN_MANAGER_PATH}/${_splugins__plugin_name}/${_splugins__plugin_name}/" ] && \
            _splugins__plugin_name="${_splugins__plugin_name}/${_splugins__plugin_name}"

        for _splugins__tmux_file in "${TMUX_PLUGIN_MANAGER_PATH}/${_splugins__plugin_name}"/*.tmux; do
            [ -f "${_splugins__tmux_file}" ] || continue
            # run *.tmux files as executables
            "${_splugins__tmux_file}" >/dev/null 2>&1
        done
    done
}

# See scripts/vars.sh for default values
_set_default_key_bindings() {
    _sdkbindings__install_key="$(_get_tmux_option_global_helper "${INSTALL_KEY_OPTION}" "${DEFAULT_INSTALL_KEY}")"
    tmux bind-key "${_sdkbindings__install_key}" run-shell "${CURRENT_DIR}/scripts/install_plugins.sh"

    _sdkbindings__update_key="$(_get_tmux_option_global_helper "${UPDATE_KEY_OPTION}" "${DEFAULT_UPDATE_KEY}")"
    tmux bind-key "${_sdkbindings__update_key}" run-shell "${CURRENT_DIR}/scripts/update_plugins_prompt.sh"

    _sdkbindings__clean_key="$(_get_tmux_option_global_helper "${CLEAN_KEY_OPTION}" "${DEFAULT_CLEAN_KEY}")"
    tmux bind-key "${_sdkbindings__clean_key}" run-shell "${CURRENT_DIR}/scripts/clean_plugins.sh"

    _sdkbindings__list_key="$(_get_tmux_option_global_helper "${LIST_KEY_OPTION}" "${DEFAULT_LIST_KEY}")"
    tmux bind-key "${_sdkbindings__list_key}" run-shell "${CURRENT_DIR}/scripts/list_plugins.sh"
}

if _supported_tmux_version_helper; then
    _reload_tmux_environment
    _set_default_key_bindings
    _source_plugins
else
    TMUX_VERSION="$(_get_tmux_option_global_helper "TMUX_VERSION")"
    if [ -z "$TMUX_VERSION" ]; then
        _display_message_helper "$(printf "%s\\n%s\\n" \
        "Error, tmux has not -V option available in $(uname -s) $(uname -r), unsupported platform!: https://github.com/javier-lopez/tundle/issues/4")"
    else
        _display_message_helper "$(printf "%s\\n" \
        "Error, tmux version ${TMUX_VERSION} unsupported! Please install tmux version >= ${SUPPORTED_TMUX_VERSION}!")"
    fi
    exit 1
fi

# vim: set ts=8 sw=4 tw=0 ft=sh :
