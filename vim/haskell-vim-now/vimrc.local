map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

set tm=500
map <leader>e :e! ~/.vimrc<cr>
" map <leader>su :source ~/.vimrc<cr>
map <leader>ee :e! ~/.config/haskell-vim-now/vimrc.local<cr>
map <leader>ep :e! ~/.config/haskell-vim-now/plugins.vim<cr>
autocmd! bufwritepost ~/.config/haskell-vim-now/vimrc.local source ~/.config/haskell-vim-now/vimrc.local
autocmd! bufwritepost ~/.config/haskell-vim-now/plugins.vim source ~/.config/haskell-vim-now/vimrc.local


" $q is super useful when browsing on the command line
" it deletes everything until the last slash
cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A>		<Home>
cnoremap <C-E>		<End>
cnoremap <C-K>		<C-U>


cnoremap <C-P> <Up>
cnoremap <C-N> <Down>
nnoremap n( ya(
nnoremap n{ ya{
nnoremap n[ ya[
nnoremap nt yat
nnoremap np yap
nnoremap N( ya(%
nnoremap N{ ya{%
nnoremap N[ ya[%
nnoremap Nt yat%
nnoremap <leader>zf :set foldmethod=indent<cr>
nnoremap <leader>zF :set foldmethod=manual<cr>
nnoremap zz :Z
inoremap jk <esc>
inoremap fd <esc>
inoremap \fp <C-R>=getcwd()<CR>
inoremap <esc> <nop>
nnoremap <leader>? :help
" close a buffer without cloing the pane
nnoremap <leader>qw :bp<bar>sp<bar>bn<bar>bd<CR>
" close a split without close the buffer
"
nmap <c-_> gcc
vmap <c-_> gc
nnoremap <leader>qq :wq<esc>
nnoremap <leader>w :w!<cr>
nnoremap <leader>qa :wqa<esc>
nnoremap <leader>X :q!<esc>
nnoremap <leader>bb :bd<esc>
nnoremap <space>bd :bd<esc>
nnoremap <leader>BB :bd!<esc>
nnoremap <c-w>v :vsplit<cr>
nnoremap <c-w>s :split<cr>
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
nnoremap <leader>cd :cd %:h<cr>
nnoremap <leader>bf :BufExplorer<cr>
nnoremap <localleader>P :%!python -m json.tool
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <cr> <esc>
"enable y to copy/paste selected text
" set clipboard^=unnamed,unnamedplus


" ------------------BEGIN------------------------------
"   ==>
iabbrev seperate -----------------------------------------
nmap <leader>Se o------------------BEGIN------------------------------<c-c>0gcc
nmap <leader>SE o==================END================================<c-c>0gcc
nmap <leader>se ojkx,Seojkx,SE2ko ==><c-c>A
nmap <leader>py 0:.,/^$/ s/^.*: //<cr>
nnoremap <leader>ds j?-BEGIN<cr>0d/=END<cr>dd
nnoremap <leader>re :e!<cr>
" ==================END================================

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

map <silent> <leader>rr :redraw!<CR>

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>
nnoremap 0 ^

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
set ssop-=buffers
"open new buffer instead new tab when open file with quickfix
set switchbuf-=newtab

set clipboard^=unnamed,unnamedplus
set wrap
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set tags=./tags,tags;

"remove trailing space
noremap <leader>rm :%s/\([^ ]\) *$/\1/<cr>

"Z - cd to recent / frequent directories
"-------------------------------------------------------------------
command! -nargs=* Z :call Z(<f-args>)
function! Z(...)
  let cmd = 'fasd -d -e printf'
  for arg in a:000
    let cmd = cmd . ' ' . arg
  endfor
  let path = system(cmd)
  if isdirectory(path)
    echo path
    exec 'cd' fnameescape(path)
  endif
endfunction



"---------------
"UI
"---------------
set nohlsearch
set number
set number relativenumber
set nowrap
set fileencodings=gb2312,utf-8,gb18030,gbk,ucs-bom,cp936,latin1
set enc=utf8
set fencs=utf8,gbk,gb2312,gb18030
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * if &number | set relativenumber | endif
  autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END


autocmd BufNewFile,BufRead *.spacemacs set filetype=lisp

colorscheme solarized8

" Convert slashes to backslashes for Windows.
if has('win32')
  nmap ,cs :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
  nmap ,cl :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  nmap ,c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
  nmap ,cs :let @*=expand("%")<CR>
  nmap ,cl :let @*=expand("%:p")<CR>
endif
